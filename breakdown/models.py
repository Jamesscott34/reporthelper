"""
Models for the breakdown app.

This app handles document uploads and AI-powered breakdown of documents
into step-by-step instructions.
"""

from django.db import models
from django.contrib.auth.models import User
import json


class Document(models.Model):
    """
    Model to store uploaded documents and their metadata.
    """
    title = models.CharField(max_length=255)
    file = models.FileField(upload_to='documents/')
    file_type = models.CharField(max_length=10, choices=[
        ('pdf', 'PDF'),
        ('docx', 'DOCX'),
        ('doc', 'DOC'),
        ('txt', 'TXT'),
    ])
    uploaded_at = models.DateTimeField(auto_now_add=True)
    uploaded_by = models.ForeignKey(
        User, on_delete=models.CASCADE, null=True, blank=True
    )
    extracted_text = models.TextField(blank=True)
    # Structured pointers back to original content (pages/paragraphs/offsets)
    extraction_map = models.JSONField(default=dict, blank=True)
    status = models.CharField(max_length=20, choices=[
        ('uploaded', 'Uploaded'),
        ('processing', 'Processing'),
        ('ready_for_ai', 'Ready For AI'),  # aligns with view usage
        ('completed', 'Completed'),
        ('failed', 'Failed'),
    ], default='uploaded')
    # New fields for tracking relationships
    parent_document = models.ForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='generated_files',
    )
    document_type = models.CharField(max_length=20, choices=[
        ('original', 'Original Upload'),
        ('breakdown', 'AI Breakdown'),
        ('report', 'Generated Report'),
        ('comparison', 'Comparison Analysis'),
        ('export', 'Exported File'),
    ], default='original')
    # Additional metadata for generated files
    # e.g., 'AI Breakdown', 'Comparison Analysis'
    generation_method = models.CharField(max_length=50, blank=True)
    # AI model used for generation
    ai_model_used = models.CharField(max_length=100, blank=True)

    def __str__(self):
        if self.document_type == 'original':
            return f"{self.title} ({self.file_type}) - Original"
        return (
            f"{self.title} ({self.file_type}) - "
            f"{self.document_type.title()}"
        )

    def is_original(self):
        """Check if this is an original uploaded document."""
        return (
            self.document_type == 'original' and self.parent_document is None
        )

    def is_generated(self):
        """Check if this is a generated file."""
        return self.document_type != 'original'

    def get_original_document(self):
        """Get the original document that this file was generated from."""
        if self.is_original():
            return self
        if self.parent_document:
            return self.parent_document.get_original_document()
        return None

    def get_generated_files(self):
        """Get all files generated from this document."""
        return self.generated_files.all()

    class Meta:
        ordering = ['-uploaded_at']


class Breakdown(models.Model):
    """
    Model to store AI-generated breakdowns of documents.
    """
    document = models.ForeignKey(
        Document,
        on_delete=models.CASCADE,
        related_name='breakdowns',
    )
    content = models.JSONField(default=dict)
    raw_breakdown = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=20, choices=[
        ('draft', 'Draft'),
        ('ready', 'Ready'),              # aligns with view usage
        ('processing', 'Processing'),    # aligns with view usage
        ('completed', 'Completed'),      # aligns with view usage
        ('failed', 'Failed'),            # aligns with view usage
        ('reviewed', 'Reviewed'),
        ('finalized', 'Finalized'),
    ], default='draft')
    ai_model_used = models.CharField(max_length=100, default='deepseek-r1')
    # Persisted step-by-step content generated by AI workflows
    step_by_step_content = models.JSONField(default=dict, blank=True)
    # Document-level summary (short)
    document_summary = models.TextField(blank=True)

    def __str__(self):
        return f"Breakdown for {self.document.title}"

    def get_formatted_content(self):
        """Return breakdown content as a dict structure when possible."""
        if isinstance(self.content, str):
            try:
                return json.loads(self.content)
            except json.JSONDecodeError:
                return {'sections': [self.content]}
        return self.content

    class Meta:
        ordering = ['-created_at']


class Section(models.Model):
    """
    Structured section belonging to a `Breakdown`.

    Stores a title, body, display order, and optional pointer metadata
    that can link back to the original document (pages/paragraphs/offsets).
    """

    breakdown = models.ForeignKey(
        Breakdown,
        on_delete=models.CASCADE,
        related_name='sections',
    )
    order = models.IntegerField(default=1)
    title = models.CharField(max_length=255)
    body = models.TextField()
    short_summary = models.TextField(blank=True)
    pointers = models.JSONField(default=dict, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Section {self.order}: {self.title}"

    class Meta:
        ordering = ['order', 'id']


class QAEntry(models.Model):
    """
    Stores per-section or document-level Q&A with citation pointers back to
    the original using extraction_map semantics.
    """
    SCOPE_CHOICES = [
        ('section', 'Section'),
        ('neighbors', 'Section+Neighbors'),
        ('document', 'Whole Document'),
    ]
    breakdown = models.ForeignKey(
        Breakdown,
        on_delete=models.CASCADE,
        related_name='qa_entries',
    )
    section = models.ForeignKey(
        Section,
        on_delete=models.CASCADE,
        related_name='qa_entries',
        null=True,
        blank=True,
    )
    scope = models.CharField(max_length=16, choices=SCOPE_CHOICES, default='section')
    question = models.TextField()
    answer = models.TextField(blank=True)
    citations = models.JSONField(default=list, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        target = self.section.title if self.section else 'Document'
        return f"Q&A for {target}: {self.question[:40]}..."


class Revision(models.Model):
    """
    Tracks edits to Sections and HowTos with before/after and status.
    """
    TARGET_CHOICES = [
        ('section', 'Section'),
        ('howto', 'HowTo'),
    ]
    STATUS_CHOICES = [
        ('proposed', 'Proposed'),
        ('accepted', 'Accepted'),
        ('rejected', 'Rejected'),
    ]
    breakdown = models.ForeignKey(Breakdown, on_delete=models.CASCADE, related_name='revisions')
    target_type = models.CharField(max_length=16, choices=TARGET_CHOICES)
    target_id = models.IntegerField()
    before = models.JSONField(default=dict)
    after = models.JSONField(default=dict)
    status = models.CharField(max_length=16, choices=STATUS_CHOICES, default='proposed')
    user = models.ForeignKey(User, null=True, blank=True, on_delete=models.SET_NULL)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']


class HowTo(models.Model):
    """
    Structured how-to guide associated with a whole breakdown or a specific
    section. Stores ordered steps as JSON.
    """
    SCOPE_CHOICES = [
        ('document', 'Document'),
        ('section', 'Section'),
    ]
    breakdown = models.ForeignKey(
        Breakdown,
        on_delete=models.CASCADE,
        related_name='howtos',
    )
    section = models.ForeignKey(
        Section,
        on_delete=models.CASCADE,
        related_name='howtos',
        null=True,
        blank=True,
    )
    scope = models.CharField(max_length=16, choices=SCOPE_CHOICES, default='document')
    title = models.CharField(max_length=255, blank=True)
    steps = models.JSONField(default=list, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        target = self.section.title if self.section else 'Document'
        return f"How-To for {target}"
